function searchRange(nums: number[], target: number): number[] {
  function binarySearch(
    array: number[],
    left: number,
    right: number,
    target: number
  ) {
    while (left <= right) {
      let mid = Math.floor((left + right) / 2);
      const midValue = array[mid];
      if (midValue === target) {
        return mid;
      } else if (midValue < target) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
    return -1;
  }

  if (nums.length === 0) return [-1, -1];
  const first_position = binarySearch(nums, 0, nums.length - 1, target);
  let start_position = first_position,
      end_position = first_position,
      temp_pos_1 = first_position,
      temp_pos_2 = first_position;

  while (start_position !== -1) {
    temp_pos_1 = start_position;
    if (start_position)
      start_position = binarySearch(nums, 0, start_position - 1, target);
  }
  start_position = temp_pos_1;

  while (end_position !== -1) {
    temp_pos_2 = end_position;
    if (end_position)
      end_position = binarySearch(nums, end_position + 1, nums.length - 1, target);
  }
  end_position = temp_pos_2;

  return [start_position, end_position];

}

//runtime:N/A
//memory:N/A
//total_testcases:88
//total_correct:4
//input_formatted:"[1],1"
//expected_output:[0,0]
//code_output:
//runtime_error:null
//last_testcase:[1] 1
